// devnet-test.js - Simple connectivity test for devnet

const { PublicKey, Connection, clusterApiUrl } = require("@solana/web3.js");

async function testDevnetConnection() {
  console.log("üöÄ Testing devnet connection...");
  
  try {
    // Connect to devnet
    const connection = new Connection(clusterApiUrl("devnet"), "confirmed");
    const PROGRAM_ID = new PublicKey("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");
    
    console.log(`üìã Program ID: ${PROGRAM_ID.toString()}`);
    
    // Check network connectivity
    const slot = await connection.getSlot();
    console.log(`‚úÖ Current slot: ${slot}`);
    
    // Check if program exists
    const account = await connection.getAccountInfo(PROGRAM_ID);
    console.log(`Program exists: ${!!account ? '‚úÖ YES' : '‚ùå NO'}`);
    
    if (account) {
      console.log(`‚úÖ Program deployed! Data length: ${account.data.length} bytes`);
      console.log(`‚úÖ Owner: ${account.owner.toString()}`);
      console.log(`‚úÖ Executable: ${account.executable}`);
      console.log(`‚úÖ Lamports: ${account.lamports}`);
    } else {
      console.log(`‚ùå Program not deployed yet on devnet`);
      console.log(`‚ÑπÔ∏è  To deploy, you would run: solana program deploy <program.so>`);
    }
    
    // Test vault PDA derivation
    const [vaultPDA, bump] = await PublicKey.findProgramAddressSync(
      [Buffer.from("vault")],
      PROGRAM_ID
    );
    console.log(`\nüîç Vault PDA: ${vaultPDA.toString()}`);
    console.log(`üîç Bump: ${bump}`);
    
    // Check if vault is initialized
    const vaultAccount = await connection.getAccountInfo(vaultPDA);
    console.log(`Vault initialized: ${!!vaultAccount ? '‚úÖ YES' : '‚ùå NO'}`);
    
    console.log(`\nüéâ Devnet connectivity test completed!`);
    
  } catch (error) {
    console.error(`‚ùå Error: ${error.message}`);
  }
}

testDevnetConnection(); 